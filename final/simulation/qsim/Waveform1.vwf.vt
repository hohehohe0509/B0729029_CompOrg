// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/10/2020 15:55:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] BusD;
wire [15:0] IR;
wire [7:0] R0d;
wire [7:0] R1d;
wire [7:0] R2d;
wire [7:0] R3d;
wire [7:0] R4d;
wire [7:0] R5d;
wire [7:0] R6d;
wire [7:0] R7d;

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.BusD(BusD),
	.IR(IR),
	.R0d(R0d),
	.R1d(R1d),
	.R2d(R2d),
	.R3d(R3d),
	.R4d(R4d),
	.R5d(R5d),
	.R6d(R6d),
	.R7d(R7d),
	.clk(clk)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(15)
	begin
		clk = 1'b0;
		clk = #32500 1'b1;
		# 32500;
	end
	clk = 1'b0;
end 
endmodule

