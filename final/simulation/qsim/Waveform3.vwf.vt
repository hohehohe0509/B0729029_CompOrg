// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/10/2020 15:26:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [2:0] AA;
wire [2:0] BA;
wire BC;
wire [7:0] BusD;
wire [2:0] DA;
wire [3:0] FS;
wire [15:0] IR;
wire JB;
wire MB;
wire MD;
wire MW;
wire N;
wire PL;
wire RW;
wire Z;

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.AA(AA),
	.BA(BA),
	.BC(BC),
	.BusD(BusD),
	.DA(DA),
	.FS(FS),
	.IR(IR),
	.JB(JB),
	.MB(MB),
	.MD(MD),
	.MW(MW),
	.N(N),
	.PL(PL),
	.RW(RW),
	.Z(Z),
	.clk(clk)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
endmodule

